if (typeof __decorate !== "function") __decorate = function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
if (typeof __metadata !== "function") __metadata = function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/// <reference path="../typings/tsd.d.ts" />
var angular2_1 = require('angular2/angular2');
var fetchService_1 = require('services/fetchService');
var App = (function () {
    function App(fetchService) {
        var _this = this;
        this.foodList = [];
        this.calories = 0;
        this.besoin = 0;
        fetchService.loadFoods().then(function (response) {
            _this.foods = response;
        }, function (response) {
            console.warn("foods loading failed (it should, file doesnt exist)");
        });
    }
    App.prototype.addFood = function (event, aliment, poids) {
        event.preventDefault();
        for (var i = 0; i < this.foods.length; i++) {
            if (this.foods[i].name.indexOf(aliment.value) != -1) {
                console.log(poids.value);
                this.calculateKcal(this.foods[i], poids.value);
                break;
            }
        }
        ;
        aliment.value = "";
        poids.value = "";
    };
    App.prototype.calculateKcal = function (food, poids) {
        this.calories += parseInt(food.calories * (poids / 100));
        this.foodList.push({ "name": food.name, "calories": this.calories, "poids": poids });
    };
    App.prototype.calculMetabolisme = function (event, sexe, taille, masse, age) {
        event.preventDefault();
        console.log(sexe.value);
        console.log(taille.value);
        console.log(masse.value);
        console.log(age.value);
        if (sexe.value == "homme") {
            this.besoin = 66.5 + (13.8 * masse.value) + (5 * taille.value) - (6.8 * age.value);
        }
        else {
            this.besoin = 655.1 + (9.6 * masse.value) + (1.9 * taille.value) - (4.7 * age.value);
        }
    };
    App = __decorate([
        angular2_1.Component({
            selector: 'app',
            appInjector: [fetchService_1.FetchService]
        }),
        angular2_1.View({
            templateUrl: "templates/main.html",
            directives: [angular2_1.NgFor]
        }), 
        __metadata('design:paramtypes', [fetchService_1.FetchService])
    ], App);
    return App;
})();
angular2_1.bootstrap(App);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6WyJBcHAiLCJBcHAuY29uc3RydWN0b3IiLCJBcHAuYWRkRm9vZCIsIkFwcC5jYWxjdWxhdGVLY2FsIiwiQXBwLmNhbGN1bE1ldGFib2xpc21lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLEFBQ0EsNENBRDRDO0FBQzVDLHlCQUFnRCxtQkFBbUIsQ0FBQyxDQUFBO0FBQ3BFLDZCQUEyQix1QkFBdUIsQ0FBQyxDQUFBO0FBRW5EO0lBY0VBLGFBQVlBLFlBQTBCQTtRQWR4Q0MsaUJBb0VDQTtRQXBER0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDbkJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2xCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUVoQkEsWUFBWUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsUUFBUUE7WUFDcENBLEtBQUlBLENBQUNBLEtBQUtBLEdBQUdBLFFBQVFBLENBQUNBO1FBQ3hCQSxDQUFDQSxFQUFFQSxVQUFBQSxRQUFRQTtZQUNUQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxxREFBcURBLENBQUNBLENBQUNBO1FBQ3RFQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVMQSxDQUFDQTtJQUVERCxxQkFBT0EsR0FBUEEsVUFBUUEsS0FBS0EsRUFBRUEsT0FBT0EsRUFBRUEsS0FBS0E7UUFDekJFLEtBQUtBLENBQUNBLGNBQWNBLEVBQUVBLENBQUNBO1FBRXZCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUMzQ0EsRUFBRUEsQ0FBQUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FB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OztZQTZEREE7SUFBREEsVUFBQ0E7QUFBREEsQ0FwRUEsQUFvRUNBLElBQUE7QUFFRCxvQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbmltcG9ydCB7Q29tcG9uZW50LCBWaWV3LCBib290c3RyYXAsIE5nRm9yfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XG5pbXBvcnQge0ZldGNoU2VydmljZX0gZnJvbSAnc2VydmljZXMvZmV0Y2hTZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwJyxcbiAgYXBwSW5qZWN0b3I6IFtGZXRjaFNlcnZpY2VdXG59KVxuQFZpZXcoe1xuICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvbWFpbi5odG1sXCIsXG4gIGRpcmVjdGl2ZXM6IFtOZ0Zvcl1cbn0pXG5jbGFzcyBBcHAge1xuICBmb29kczogQXJyYXk8T2JqZWN0PjtcbiAgZm9vZExpc3Q6IEFycmF5PE9iamVjdD47XG4gIGNhbG9yaWVzOiBOdW1iZXI7XG4gIGJlc29pbjogTnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGZldGNoU2VydmljZTogRmV0Y2hTZXJ2aWNlKSB7XG5cbiAgICB0aGlzLmZvb2RMaXN0ID0gW107XG4gICAgdGhpcy5jYWxvcmllcyA9IDA7XG4gICAgdGhpcy5iZXNvaW4gPSAwO1xuXG4gICAgZmV0Y2hTZXJ2aWNlLmxvYWRGb29kcygpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgdGhpcy5mb29kcyA9IHJlc3BvbnNlO1xuICAgIH0sIHJlc3BvbnNlID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihcImZvb2RzIGxvYWRpbmcgZmFpbGVkIChpdCBzaG91bGQsIGZpbGUgZG9lc250IGV4aXN0KVwiKTtcbiAgICB9KTtcblxuICB9XG5cbiAgYWRkRm9vZChldmVudCwgYWxpbWVudCwgcG9pZHMpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5mb29kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiggdGhpcy5mb29kc1tpXS5uYW1lLmluZGV4T2YoYWxpbWVudC52YWx1ZSkgIT0gLTEpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKHBvaWRzLnZhbHVlKTtcbiAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUtjYWwodGhpcy5mb29kc1tpXSwgcG9pZHMudmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBhbGltZW50LnZhbHVlID0gXCJcIjtcbiAgICAgIHBvaWRzLnZhbHVlID0gXCJcIjtcblxuICAgIH1cblxuICAgIGNhbGN1bGF0ZUtjYWwoZm9vZCwgcG9pZHMpe1xuXG4gICAgICB0aGlzLmNhbG9yaWVzICs9IHBhcnNlSW50KGZvb2QuY2Fsb3JpZXMgKiAocG9pZHMvMTAwKSApO1xuICAgICAgdGhpcy5mb29kTGlzdC5wdXNoKHtcIm5hbWVcIjpmb29kLm5hbWUsIFwiY2Fsb3JpZXNcIjp0aGlzLmNhbG9yaWVzLCBcInBvaWRzXCI6cG9pZHMgfSk7XG4gICAgfVxuXG4gICAgY2FsY3VsTWV0YWJvbGlzbWUoZXZlbnQsIHNleGUsIHRhaWxsZSwgbWFzc2UsIGFnZSl7XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKHNleGUudmFsdWUpO1xuICAgICAgY29uc29sZS5sb2codGFpbGxlLnZhbHVlKTtcbiAgICAgIGNvbnNvbGUubG9nKG1hc3NlLnZhbHVlKTtcbiAgICAgIGNvbnNvbGUubG9nKGFnZS52YWx1ZSk7XG5cbiAgICAgIGlmIChzZXhlLnZhbHVlID09IFwiaG9tbWVcIikge1xuICAgICAgICB0aGlzLmJlc29pbiA9IDY2LjUgKyAoMTMuOCAqIG1hc3NlLnZhbHVlKSArICg1ICogdGFpbGxlLnZhbHVlKSAtICg2LjggKiBhZ2UudmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICB0aGlzLmJlc29pbiA9IDY1NS4xICsgKDkuNiAqIG1hc3NlLnZhbHVlKSArICgxLjkgKiB0YWlsbGUudmFsdWUpIC0gKDQuNyAqIGFnZS52YWx1ZSk7XG4gICAgICB9XG5cbiAgICB9XG59XG5cbmJvb3RzdHJhcChBcHApO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9