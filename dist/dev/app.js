if (typeof __decorate !== "function") __decorate = function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
if (typeof __metadata !== "function") __metadata = function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/// <reference path="../typings/tsd.d.ts" />
var angular2_1 = require('angular2/angular2');
var fetchService_1 = require('services/fetchService');
var App = (function () {
    function App(fetchService) {
        var _this = this;
        this.foodList = [];
        this.calories = 0;
        this.besoin = 0;
        fetchService.loadFoods().then(function (response) {
            _this.foods = response;
        }, function (response) {
            console.warn("foods loading failed (it should, file doesnt exist)");
        });
    }
    App.prototype.addFood = function (event, aliment, poids) {
        event.preventDefault();
        for (var i = 0; i < this.foods.length; i++) {
            if (this.foods[i].name.indexOf(aliment.value) != -1) {
                this.calculateKcal(this.foods[i], poids.value);
                break;
            }
        }
        ;
        aliment.value = "";
        poids.value = "";
    };
    App.prototype.deleteFood = function (event, i, food) {
        event.preventDefault();
        var calories = food.calories;
        this.calories -= calories;
        this.foodList.splice(i, 1);
    };
    App.prototype.calculateKcal = function (food, poids) {
        var calories = parseInt(food.calories * (poids / 100));
        this.foodList.push({ "name": food.name, "calories": calories, "poids": poids.value });
        this.calories += calories;
    };
    App.prototype.calculMetabolisme = function (event, taille, masse, age) {
        event.preventDefault();
        if (document.getElementById('homme').checked) {
            this.besoin = parseInt(66.5 + (13.8 * masse.value) + (5 * taille.value) - (6.8 * age.value));
        }
        else {
            this.besoin = parseInt(655.1 + (9.6 * masse.value) + (1.9 * taille.value) - (4.7 * age.value));
        }
    };
    App = __decorate([
        angular2_1.Component({
            selector: 'app',
            appInjector: [fetchService_1.FetchService]
        }),
        angular2_1.View({
            templateUrl: "templates/main.html",
            directives: [angular2_1.NgFor, angular2_1.NgIf]
        }), 
        __metadata('design:paramtypes', [fetchService_1.FetchService])
    ], App);
    return App;
})();
angular2_1.bootstrap(App);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6WyJBcHAiLCJBcHAuY29uc3RydWN0b3IiLCJBcHAuYWRkRm9vZCIsIkFwcC5kZWxldGVGb29kIiwiQXBwLmNhbGN1bGF0ZUtjYWwiLCJBcHAuY2FsY3VsTWV0YWJvbGlzbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsQUFDQSw0Q0FENEM7QUFDNUMseUJBQXNELG1CQUFtQixDQUFDLENBQUE7QUFDMUUsNkJBQTJCLHVCQUF1QixDQUFDLENBQUE7QUFFbkQ7SUFjRUEsYUFBWUEsWUFBMEJBO1FBZHhDQyxpQkF3RUNBO1FBeERHQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNuQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDbEJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1FBRWhCQSxZQUFZQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFBQSxRQUFRQTtZQUNwQ0EsS0FBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFDeEJBLENBQUNBLEVBQUVBLFVBQUFBLFFBQVFBO1lBQ1RBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLHFEQUFxREEsQ0FBQ0EsQ0FBQ0E7UUFDdEVBLENBQUNBLENBQUNBLENBQUNBO0lBRUxBLENBQUNBO0lBRURELHFCQUFPQSxHQUFQQSxVQUFRQSxLQUFLQSxFQUFFQSxPQUFPQSxFQUFFQSxLQUFLQTtRQUN6QkUsS0FBS0EsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFFdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzNDQSxFQUFFQSxDQUFBQSxDQUFFQSxJQUFJQSxDQUFDQSxLQUFL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QSxxQkFBcUJBO1lBQ2xDQSxVQUFVQSxFQUFFQSxDQUFDQSxnQkFBS0EsRUFBRUEsZUFBSUEsQ0FBQ0E7U0FDMUJBLENBQUNBOztZQWlFREE7SUFBREEsVUFBQ0E7QUFBREEsQ0F4RUEsQUF3RUNBLElBQUE7QUFFRCxvQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cclxuaW1wb3J0IHtDb21wb25lbnQsIFZpZXcsIGJvb3RzdHJhcCwgTmdGb3IsIE5nSWZ9IGZyb20gJ2FuZ3VsYXIyL2FuZ3VsYXIyJztcclxuaW1wb3J0IHtGZXRjaFNlcnZpY2V9IGZyb20gJ3NlcnZpY2VzL2ZldGNoU2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAgYXBwSW5qZWN0b3I6IFtGZXRjaFNlcnZpY2VdXHJcbn0pXHJcbkBWaWV3KHtcclxuICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvbWFpbi5odG1sXCIsXHJcbiAgZGlyZWN0aXZlczogW05nRm9yLCBOZ0lmXVxyXG59KVxyXG5jbGFzcyBBcHAge1xyXG4gIGZvb2RzOiBBcnJheTxPYmplY3Q+O1xyXG4gIGZvb2RMaXN0OiBBcnJheTxPYmplY3Q+O1xyXG4gIGNhbG9yaWVzOiBOdW1iZXI7XHJcbiAgYmVzb2luOiBOdW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGZldGNoU2VydmljZTogRmV0Y2hTZXJ2aWNlKSB7XHJcblxyXG4gICAgdGhpcy5mb29kTGlzdCA9IFtdO1xyXG4gICAgdGhpcy5jYWxvcmllcyA9IDA7XHJcbiAgICB0aGlzLmJlc29pbiA9IDA7XHJcblxyXG4gICAgZmV0Y2hTZXJ2aWNlLmxvYWRGb29kcygpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICB0aGlzLmZvb2RzID0gcmVzcG9uc2U7XHJcbiAgICB9LCByZXNwb25zZSA9PiB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcImZvb2RzIGxvYWRpbmcgZmFpbGVkIChpdCBzaG91bGQsIGZpbGUgZG9lc250IGV4aXN0KVwiKTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIGFkZEZvb2QoZXZlbnQsIGFsaW1lbnQsIHBvaWRzKSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZm9vZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiggdGhpcy5mb29kc1tpXS5uYW1lLmluZGV4T2YoYWxpbWVudC52YWx1ZSkgIT0gLTEpe1xyXG4gICAgICAgICAgdGhpcy5jYWxjdWxhdGVLY2FsKHRoaXMuZm9vZHNbaV0sIHBvaWRzLnZhbHVlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGFsaW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgICBwb2lkcy52YWx1ZSA9IFwiXCI7XHJcblxyXG4gICAgfVxyXG5cclxuICBkZWxldGVGb29kKGV2ZW50LCBpLCBmb29kKSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICB2YXIgY2Fsb3JpZXMgPSBmb29kLmNhbG9yaWVzO1xyXG4gICAgICB0aGlzLmNhbG9yaWVzIC09IGNhbG9yaWVzO1xyXG4gICAgICB0aGlzLmZvb2RMaXN0LnNwbGljZShpLDEpOyAgICAgXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNhbGN1bGF0ZUtjYWwoZm9vZCwgcG9pZHMpe1xyXG4gICAgICB2YXIgY2Fsb3JpZXMgPSBwYXJzZUludChmb29kLmNhbG9yaWVzICogKHBvaWRzLzEwMCkgKTtcclxuICAgICAgdGhpcy5mb29kTGlzdC5wdXNoKHtcIm5hbWVcIjpmb29kLm5hbWUsIFwiY2Fsb3JpZXNcIjpjYWxvcmllcywgXCJwb2lkc1wiOnBvaWRzLnZhbHVlIH0pO1xyXG5cclxuICAgICAgdGhpcy5jYWxvcmllcyArPSBjYWxvcmllcztcclxuICAgIH1cclxuXHJcbiAgICBjYWxjdWxNZXRhYm9saXNtZShldmVudCwgdGFpbGxlLCBtYXNzZSwgYWdlKXtcclxuXHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hvbW1lJykuY2hlY2tlZCkge1xyXG4gICAgICAgIHRoaXMuYmVzb2luID0gcGFyc2VJbnQoIDY2LjUgKyAoMTMuOCAqIG1hc3NlLnZhbHVlKSArICg1ICogdGFpbGxlLnZhbHVlKSAtICg2LjggKiBhZ2UudmFsdWUpICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgdGhpcy5iZXNvaW4gPSBwYXJzZUludCggNjU1LjEgKyAoOS42ICogbWFzc2UudmFsdWUpICsgKDEuOSAqIHRhaWxsZS52YWx1ZSkgLSAoNC43ICogYWdlLnZhbHVlKSApO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5ib290c3RyYXAoQXBwKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9