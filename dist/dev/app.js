if (typeof __decorate !== "function") __decorate = function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
if (typeof __metadata !== "function") __metadata = function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/// <reference path="../typings/tsd.d.ts" />
var angular2_1 = require('angular2/angular2');
var fetchService_1 = require('services/fetchService');
var foodService_1 = require('services/foodService');
var positifPipe_1 = require('pipes/positifPipe');
var loginValidators_1 = require('validators/loginValidators');
var App = (function () {
    function App(fetchService, foodService, customValidators) {
        var _this = this;
        this.foodService = foodService;
        this.foodList = this.foodService.getFood();
        this.caloriesCount = this.foodService.getCaloriesCount();
        this.caloriesNeed = this.foodService.getCaloriesNeed();
        fetchService.loadFoods().then(function (response) {
            _this.foods = response;
        }, function (response) {
            console.warn("foods loading failed (it should, file doesnt exist)");
        });
        this.imcForm = new angular2_1.ControlGroup({
            taille: new angular2_1.Control("", customValidators.taille),
            age: new angular2_1.Control("", customValidators.age),
            masse: new angular2_1.Control("", customValidators.masse)
        });
    }
    App.prototype.addFood = function (event, aliment, poids) {
        event.preventDefault();
        for (var i = 0; i < this.foods.length; i++) {
            if (this.foods[i].name.indexOf(aliment.value) != -1) {
                this.foodService.addFood(this.foods[i].name, this.foods[i].calories, poids.value);
                break;
            }
        }
        ;
        this.caloriesCount = this.foodService.getCaloriesCount();
        aliment.value = "";
        poids.value = "";
    };
    App.prototype.deleteFood = function (event, index, food) {
        event.preventDefault();
        this.foodService.deleteFood(index, food.calories);
        this.caloriesCount = this.foodService.getCaloriesCount();
    };
    App.prototype.getCaloriesNeed = function (event, taille, masse, age) {
        event.preventDefault();
        if (this.imcForm.valid) {
            if (document.getElementById('homme').checked) {
                var sexe = "homme";
            }
            else {
                var sexe = "femme";
            }
            this.caloriesNeed = this.foodService.getCaloriesNeed(masse.value, taille.value, age.value, sexe);
        }
        else {
            console.log(this.imcForm);
        }
    };
    App = __decorate([
        angular2_1.Component({
            selector: 'app',
            appInjector: [fetchService_1.FetchService, foodService_1.FoodService, loginValidators_1.CustomValidators]
        }),
        angular2_1.View({
            templateUrl: "templates/main.html",
            directives: [angular2_1.NgFor, angular2_1.NgIf, angular2_1.formDirectives]
        }), 
        __metadata('design:paramtypes', [fetchService_1.FetchService, foodService_1.FoodService, loginValidators_1.CustomValidators])
    ], App);
    return App;
})();
exports.pipes = Object.assign({}, angular2_1.defaultPipes, {
    positif: [
        new positifPipe_1.PositifPipe()
    ]
});
angular2_1.bootstrap(App, angular2_1.bind(angular2_1.PipeRegistry).toValue(new angular2_1.PipeRegistry(exports.pipes)));

//# sourceMappingURL=data:application/json;base64,