if (typeof __decorate !== "function") __decorate = function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
if (typeof __metadata !== "function") __metadata = function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/// <reference path="../typings/tsd.d.ts" />
var angular2_1 = require('angular2/angular2');
var fetchService_1 = require('services/fetchService');
var positifPipe_1 = require('pipes/positifPipe');
var App = (function () {
    function App(fetchService) {
        var _this = this;
        this.foodList = [];
        this.calories = 0;
        this.besoin = 0;
        fetchService.loadFoods().then(function (response) {
            _this.foods = response;
        }, function (response) {
            console.warn("foods loading failed (it should, file doesnt exist)");
        });
    }
    App.prototype.addFood = function (event, aliment, poids) {
        event.preventDefault();
        for (var i = 0; i < this.foods.length; i++) {
            if (this.foods[i].name.indexOf(aliment.value) != -1) {
                this.calculateKcal(this.foods[i], poids.value);
                break;
            }
        }
        ;
        aliment.value = "";
        poids.value = "";
    };
    App.prototype.deleteFood = function (event, i, food) {
        event.preventDefault();
        var calories = food.calories;
        this.calories -= calories;
        this.foodList.splice(i, 1);
    };
    App.prototype.calculateKcal = function (food, poids) {
        var calories = parseInt(food.calories * (poids / 100));
        this.foodList.push({ "name": food.name, "calories": calories, "poids": poids.value });
        this.calories += calories;
    };
    App.prototype.calculMetabolisme = function (event, taille, masse, age) {
        event.preventDefault();
        if (document.getElementById('homme').checked) {
            this.besoin = parseInt(66.5 + (13.8 * masse.value) + (5 * taille.value) - (6.8 * age.value));
        }
        else {
            this.besoin = parseInt(655.1 + (9.6 * masse.value) + (1.9 * taille.value) - (4.7 * age.value));
        }
    };
    App = __decorate([
        angular2_1.Component({
            selector: 'app',
            appInjector: [fetchService_1.FetchService]
        }),
        angular2_1.View({
            templateUrl: "templates/main.html",
            directives: [angular2_1.NgFor, angular2_1.NgIf]
        }), 
        __metadata('design:paramtypes', [fetchService_1.FetchService])
    ], App);
    return App;
})();
exports.pipes = Object.assign({}, angular2_1.defaultPipes, {
    positif: [
        new positifPipe_1.PositifPipe()
    ]
});
angular2_1.bootstrap(App, angular2_1.bind(angular2_1.PipeRegistry).toValue(new angular2_1.PipeRegistry(exports.pipes)));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6WyJBcHAiLCJBcHAuY29uc3RydWN0b3IiLCJBcHAuYWRkRm9vZCIsIkFwcC5kZWxldGVGb29kIiwiQXBwLmNhbGN1bGF0ZUtjYWwiLCJBcHAuY2FsY3VsTWV0YWJvbGlzbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsQUFDQSw0Q0FENEM7QUFDNUMseUJBQXdGLG1CQUFtQixDQUFDLENBQUE7QUFDNUcsNkJBQTJCLHVCQUF1QixDQUFDLENBQUE7QUFDbkQsNEJBQTBCLG1CQUFtQixDQUFDLENBQUE7QUFHOUM7SUFjRUEsYUFBWUEsWUFBMEJBO1FBZHhDQyxpQkF3RUNBO1FBeERHQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNuQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDbEJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1FBRWhCQSxZQUFZQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFBQSxRQUFRQTtZQUNwQ0EsS0FBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFDeEJBLENBQUNBLEVBQUVBLFVBQUFBLFFBQVFBO1lBQ1RBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLHFEQUFxREEsQ0FBQ0EsQ0FBQ0E7UUFDdEVBLENBQUNBLENBQUNBLENBQUNBO0lBRUxBLENBQUNBO0lBRURELHFCQUFPQSxHQUFQQSxVQUFRQSxLQUFLQSxFQUFFQSxPQUFPQSxFQUFFQSxLQUFLQTtRQUN6QkUsS0FBS0EsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFFdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzNDQSxFQUFF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QSxlQUFJQSxDQUFDQTtZQUNKQSxXQUFXQSxFQUFFQSxxQkFBcUJBO1lBQ2xDQSxVQUFVQSxFQUFFQSxDQUFDQSxnQkFBS0EsRUFBRUEsZUFBSUEsQ0FBQ0E7U0FDMUJBLENBQUNBOztZQWlFREE7SUFBREEsVUFBQ0E7QUFBREEsQ0F4RUEsQUF3RUNBLElBQUE7QUFFVSxhQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsdUJBQVksRUFBRTtJQUNqRCxPQUFPLEVBQUU7UUFDUCxJQUFJLHlCQUFXLEVBQUU7S0FDbEI7Q0FDRixDQUFDLENBQUM7QUFFSCxvQkFBUyxDQUFDLEdBQUcsRUFBRSxlQUFJLENBQUMsdUJBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLHVCQUFZLENBQUMsYUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cclxuaW1wb3J0IHtDb21wb25lbnQsIFZpZXcsIGJvb3RzdHJhcCwgTmdGb3IsIE5nSWYsIGRlZmF1bHRQaXBlcywgUGlwZVJlZ2lzdHJ5LCBiaW5kfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XHJcbmltcG9ydCB7RmV0Y2hTZXJ2aWNlfSBmcm9tICdzZXJ2aWNlcy9mZXRjaFNlcnZpY2UnO1xyXG5pbXBvcnQge1Bvc2l0aWZQaXBlfSBmcm9tICdwaXBlcy9wb3NpdGlmUGlwZSc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAnLFxyXG4gIGFwcEluamVjdG9yOiBbRmV0Y2hTZXJ2aWNlXVxyXG59KVxyXG5AVmlldyh7XHJcbiAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL21haW4uaHRtbFwiLFxyXG4gIGRpcmVjdGl2ZXM6IFtOZ0ZvciwgTmdJZl1cclxufSlcclxuY2xhc3MgQXBwIHtcclxuICBmb29kczogQXJyYXk8T2JqZWN0PjtcclxuICBmb29kTGlzdDogQXJyYXk8T2JqZWN0PjtcclxuICBjYWxvcmllczogTnVtYmVyO1xyXG4gIGJlc29pbjogTnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihmZXRjaFNlcnZpY2U6IEZldGNoU2VydmljZSkge1xyXG5cclxuICAgIHRoaXMuZm9vZExpc3QgPSBbXTtcclxuICAgIHRoaXMuY2Fsb3JpZXMgPSAwO1xyXG4gICAgdGhpcy5iZXNvaW4gPSAwO1xyXG5cclxuICAgIGZldGNoU2VydmljZS5sb2FkRm9vZHMoKS50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgdGhpcy5mb29kcyA9IHJlc3BvbnNlO1xyXG4gICAgfSwgcmVzcG9uc2UgPT4ge1xyXG4gICAgICBjb25zb2xlLndhcm4oXCJmb29kcyBsb2FkaW5nIGZhaWxlZCAoaXQgc2hvdWxkLCBmaWxlIGRvZXNudCBleGlzdClcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBhZGRGb29kKGV2ZW50LCBhbGltZW50LCBwb2lkcykge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZvb2RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYoIHRoaXMuZm9vZHNbaV0ubmFtZS5pbmRleE9mKGFsaW1lbnQudmFsdWUpICE9IC0xKXtcclxuICAgICAgICAgIHRoaXMuY2FsY3VsYXRlS2NhbCh0aGlzLmZvb2RzW2ldLCBwb2lkcy52YWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBhbGltZW50LnZhbHVlID0gXCJcIjtcclxuICAgICAgcG9pZHMudmFsdWUgPSBcIlwiO1xyXG5cclxuICAgIH1cclxuXHJcbiAgZGVsZXRlRm9vZChldmVudCwgaSwgZm9vZCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgdmFyIGNhbG9yaWVzID0gZm9vZC5jYWxvcmllcztcclxuICAgICAgdGhpcy5jYWxvcmllcyAtPSBjYWxvcmllcztcclxuICAgICAgdGhpcy5mb29kTGlzdC5zcGxpY2UoaSwxKTsgICAgIFxyXG5cclxuICAgIH1cclxuXHJcbiAgICBjYWxjdWxhdGVLY2FsKGZvb2QsIHBvaWRzKXtcclxuICAgICAgdmFyIGNhbG9yaWVzID0gcGFyc2VJbnQoZm9vZC5jYWxvcmllcyAqIChwb2lkcy8xMDApICk7XHJcbiAgICAgIHRoaXMuZm9vZExpc3QucHVzaCh7XCJuYW1lXCI6Zm9vZC5uYW1lLCBcImNhbG9yaWVzXCI6Y2Fsb3JpZXMsIFwicG9pZHNcIjpwb2lkcy52YWx1ZSB9KTtcclxuXHJcbiAgICAgIHRoaXMuY2Fsb3JpZXMgKz0gY2Fsb3JpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY3VsTWV0YWJvbGlzbWUoZXZlbnQsIHRhaWxsZSwgbWFzc2UsIGFnZSl7XHJcblxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdob21tZScpLmNoZWNrZWQpIHtcclxuICAgICAgICB0aGlzLmJlc29pbiA9IHBhcnNlSW50KCA2Ni41ICsgKDEzLjggKiBtYXNzZS52YWx1ZSkgKyAoNSAqIHRhaWxsZS52YWx1ZSkgLSAoNi44ICogYWdlLnZhbHVlKSApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAge1xyXG4gICAgICAgIHRoaXMuYmVzb2luID0gcGFyc2VJbnQoIDY1NS4xICsgKDkuNiAqIG1hc3NlLnZhbHVlKSArICgxLjkgKiB0YWlsbGUudmFsdWUpIC0gKDQuNyAqIGFnZS52YWx1ZSkgKTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBwaXBlcyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQaXBlcywge1xyXG4gIHBvc2l0aWY6IFtcclxuICAgIG5ldyBQb3NpdGlmUGlwZSgpXHJcbiAgXVxyXG59KTtcclxuXHJcbmJvb3RzdHJhcChBcHAsIGJpbmQoUGlwZVJlZ2lzdHJ5KS50b1ZhbHVlKG5ldyBQaXBlUmVnaXN0cnkocGlwZXMpKSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==